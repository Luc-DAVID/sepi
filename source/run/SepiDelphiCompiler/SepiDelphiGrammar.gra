Ce fichier décrit la grammaire du langage Delphi.

#####

tkEof	Fin de fichier
tkBlank Blanc
tkComment   Commentaire
tkIdentifier	Identificateur
tkInteger	Nombre entier
tkFloat	Nombre en virgule flottante
tkStringCst	Chaine

tkOpenBracket	(
tkCloseBracket	)
tkOpenSqBracket	[
tkCloseSqBracket	]
tkEquals	=
tkComma	,
tkColon	:
tkSemiColon	;
tkDot	.
tkRange	..
tkHat	^
tkAt	@
tkAssign	:=

tkUnit	unit
tkUses	uses
tkType	type
tkConst	const
tkResourceString	resourcestring
tkVar	var
tkOut	out

tkArray	array
tkSet	set
tkOf	of
tkObject	object
tkPacked	packed
tkRecord	record
tkCase	case
tkInterface	interface
tkDispInterface	dispinterface
tkClass	class
tkPrivate	private
tkProtected	protected
tkPublic	public
tkPublished	published
tkStrict	strict
tkBegin	begin
tkEnd	end
tkNil	nil

tkProcedure	procedure
tkFunction	function
tkProperty	property
tkConstructor	constructor
tkDestructor	destructor

tkPlus	+
tkMinus	-
tkTimes	*
tkDivide	/
tkDiv	div
tkMod	mod
tkShl	shl
tkShr	shr
tkOr	or
tkAnd	and
tkXor	xor
tkNot	not
tkLowerThan	<
tkLowerEq	<=
tkGreaterThan	>
tkGreaterEq	>=
tkNotEqual	<>
tkIs	is
tkAs	as

tkRegister	register
tkCDecl	cdecl
tkPascal	pascal
tkStdCall	stdcall
tkSafeCall	safecall
tkAssembler	assembler

tkName	name
tkIndex	index
tkRead	read
tkWrite	write
tkDefault	default
tkNoDefault	nodefault
tkStored	stored
tkDispID	dispid
tkReadOnly	readonly
tkWriteOnly	writeonly
tkString	string

tkDeprecated	deprecated
tkPlatform	platform

tkOverload	overload
tkVirtual	virtual
tkDynamic	dynamic
tkMessage	message
tkOverride	override
tkAbstract	abstract
tkStatic	static
tkReintroduce	reintroduce
tkInline	inline

tkImplementation	implementation
tkForward	forward
tkInitialization	initialization
tkFinalization	finalization

tkIf	if
tkThen	then
tkElse	else
tkWhile	while
tkDo	do
tkRepeat	repeat
tkUntil	until
tkFor	for
tkTo	to
tkDownTo	downto
tkTry	try
tkExcept	except
tkOn	on
tkFinally	finally
tkRaise	raise
tkInherited	inherited

tkPreProcessor  Directive de compilation

#####

ntSource	Source
	'unit'* Identifier ';'* Interface (Implementation 'end'* '.'*)? tkEof*

ntInPreProcessorExpression	InPreProcessorExpression
	ConstExpression tkEof*

ntInterface	Interface
	'interface'* UsesSection (IntfSection)*

ntImplementation	Implementation
	'implementation'* (ImplSection)* InitFinit

ntIntfSection	IntfSection	Simplify
	TypeSection
	ConstSection
	VarSection
	RoutineDecl

ntImplSection	ImplSection	Simplify
	TypeSection
	ConstSection
	VarSection
	MethodImpl

ntInitFinit	InitFinit	Simplify
	UnitInitialization (UnitFinalization)?
	@

ntIdentifier	Identifier
	tkIdentifier
	'register'
	'cdecl'
	'pascal'
	'stdcall'
	'safecall'
	'assembler'
	'name'
	'index'
	'read'
	'write'
	'default'
	'nodefault'
	'stored'
	'dispid'
	'readonly'
	'writeonly'
	'string'
	'deprecated'
	'platform'
	'overload'
	'virtual'
	'dynamic'
	'message'
	'override'
	'abstract'
	'static'
	'reintroduce'
	'inline'

ntUsesSection	UsesSection
	'uses'* CommaIdentList ';'*
	@

ntCommaIdentList	CommaIdentList	Simplify
	Identifier (','* Identifier)*

ntCommaIdentDeclList	CommaIdentDeclList
	IdentifierDecl (','* IdentifierDecl)*

ntQualifiedIdent	QualifiedIdent	AsText
	Identifier ('.'* Identifier)*

ntIdentifierDecl	IdentifierDecl	AsText
	Identifier

ntInitializationExpression	InitializationExpression
	0 ArrayInitializationExpression
	1 RecordInitializationExpression
	2 GUIDInitializationExpression
	3 OtherInitializationExpression

ntArrayInitializationExpression	ArrayInitializationExpression
	ArrayInitialization

ntArrayInitialization	ArrayInitialization
	'('* InitializationExpression (','* InitializationExpression)* ')'*

ntRecordInitializationExpression	RecordInitializationExpression
	RecordInitialization

ntRecordInitialization	RecordInitialization
	'('* Identifier ':'* InitializationExpression RecordInitEx ')'*

ntRecordInitEx	RecordInitEx	Simplify
	';'* (Identifier ':'* InitializationExpression RecordInitEx)?
	@

ntGUIDInitializationExpression	GUIDInitializationExpression
	GUIDInitialization

ntGUIDInitialization	GUIDInitialization
	RecordInitialization
	tkStringCst

ntOtherInitializationExpression	OtherInitializationExpression
	OtherInitialization

ntOtherInitialization	OtherInitialization
	ConstExpression

ntExpression	Expression
	SingleExpr (BinaryOp SingleExpr)*

ntExpressionNoEquals	ExpressionNoEquals
	SingleExpr (BinaryOpNoEquals SingleExpr)*

ntConstExpression	ConstExpression
	Expression

ntConstExpressionNoEquals	ConstExpressionNoEquals
	ExpressionNoEquals

ntConstOrType	ConstOrType
	Expression

ntConstOrTypeNoEquals	ConstOrTypeNoEquals
	ExpressionNoEquals

ntSingleExpr	SingleExpr
	ParenthesizedExpr (NextExpr)*
	SingleValue (NextExpr)*
	UnaryOpExpr

ntUnaryOpExpr	UnaryOpExpr
	UnaryOp SingleExpr
	AddressOfOp SingleExpr

ntParenthesizedExpr	ParenthesizedExpr
	'('* Expression ')'*

ntNextExpr	NextExpr	Simplify
	UnaryOpModifier
	Parameters
	ArrayIndices
	FieldSelection

ntUnaryOpModifier	UnaryOpModifier
	DereferenceOp

ntDereferenceOp	DereferenceOp
	'^'

ntParameters	Parameters
	'('* ExprListOrEmpty ')'*

ntExprListOrEmpty	ExprListOrEmpty	Simplify
	ExprList
	@

ntIdentTestParam	IdentTestParam
	'('* Identifier ')'*

ntArrayIndices	ArrayIndices
	'['* ExprList ']'*

ntExprList	ExprList	Simplify
	Expression (','* Expression)*

ntFieldSelection	FieldSelection
	'.'* Identifier

ntSingleValue	SingleValue
	IntegerConst
	FloatConst
	StringConst
	IdentifierSingleValue
	'inherited'* InheritedSingleValue
	NilValue
	'['* SetValue ']'*

ntIntegerConst	IntegerConst
	tkInteger

ntFloatConst	FloatConst
	tkFloat

ntStringConst	StringConst
	tkStringCst

ntIdentifierSingleValue	IdentifierSingleValue
	Identifier

ntInheritedSingleValue	InheritedSingleValue	Simplify
	1 InheritedExpression
	0 PureInheritedExpression

ntInheritedExpression	InheritedExpression
	Identifier

ntPureInheritedExpression	PureInheritedExpression
	@

ntNilValue	NilValue
	'nil'

ntSetValue	SetValue
	SetRange (','* SetRange)*
	@

ntSetRange	SetRange
	Expression ('..'* Expression)?

ntBinaryOp	BinaryOp	Simplify
	ArithmeticLogicOp
	IsOperation
	AsOperation

ntBinaryOpNoEquals	BinaryOpNoEquals	Simplify
	ArithmeticLogicOpNoEquals
	IsOperation
	AsOperation

ntArithmeticLogicOp	ArithmeticLogicOp
	'+'
	'-'
	'*'
	'/'
	'div'
	'mod'
	'shl'
	'shr'
	'or'
	'and'
	'xor'
	'='
	'<'
	'<='
	'>'
	'>='
	'<>'

ntArithmeticLogicOpNoEquals	ArithmeticLogicOpNoEquals
	'+'
	'-'
	'*'
	'/'
	'div'
	'mod'
	'shl'
	'shr'
	'or'
	'and'
	'xor'
	'<'
	'<='
	'>'
	'>='
	'<>'

ntIsOperation	IsOperation
	'is'

ntAsOperation	AsOperation
	'as'

ntUnaryOp	UnaryOp
	'+'
	'-'
	'not'

ntAddressOfOp	AddressOfOp
	'@'

ntConstSection	ConstSection
	ConstKeyWord* (ConstDecl)+

ntConstKeyWord	ConstKeyWord
	'const'
	'resourcestring'

ntConstDecl	ConstDecl
	IdentifierDecl InnerConstDecl TypeModifiers ';'*

ntInnerConstDecl	InnerConstDecl	Simplify
	':'* TypeDesc '='* InitializationExpression
	'='* ConstExpression

ntVarSection	VarSection
	'var'* (GlobalVar)+

ntGlobalVar	GlobalVar
	IdentifierDecl InnerGlobalVar TypeModifiers ';'*

ntInnerGlobalVar	InnerGlobalVar	Simplify
	':'* TypeDesc ('='* InitializationExpression)?
	(','* IdentifierDecl)+ ':'* TypeDesc

ntTypeSection	TypeSection
	'type'* (TypeDecl)+

ntTypeDecl	TypeDecl
	IdentifierDecl '='* TypeDesc TypeModifiers ';'*

ntTypeDesc	TypeDesc	Simplify
	CloneDesc
	RangeOrEnumDesc
	SetDesc
	1 StringDesc
	PointerDesc
	ArrayDesc
	RecordDesc
	'packed'* PackedDesc
	ClassDesc
	InterfaceDesc
	DispInterfaceDesc
	EventDesc

ntTypeName	TypeName
	QualifiedIdent

ntPackedDesc	PackedDesc	Simplify
	PackedArrayDesc
	PackedRecordDesc

ntArrayDesc	ArrayDesc
	'array'* ArrayDims 'of'* TypeDesc

ntPackedArrayDesc	PackedArrayDesc
	'array'* ArrayDims 'of'* TypeDesc

ntArrayDims	ArrayDims
	'['* ArrayRange (','* ArrayRange)* ']'*
	@

ntArrayRange	ArrayRange
	ConstOrType ('..'* ConstExpression)?

ntTypeModifiers	TypeModifiers
	(Identifier)*

ntCloneDesc	CloneDesc
	'type'* TypeName

ntRangeOrEnumDesc	RangeOrEnumDesc	SuccessiveTries
	EnumDesc
	RangeDesc

ntRangeDesc	RangeDesc
	ConstOrTypeNoEquals ('..'* ConstExpressionNoEquals)?

ntEnumDesc	EnumDesc
	'('* CommaIdentList ')'*

ntSetDesc	SetDesc
	'set'* 'of'* TypeDesc

ntStringDesc	StringDesc
	'string' ('['* ConstExpression ']'*)?

ntPointerDesc	PointerDesc
	'^'* QualifiedIdent

ntRecordDesc	RecordDesc
	'record'* RecordContents 'end'*

ntPackedRecordDesc	PackedRecordDesc
	'record'* RecordContents 'end'*

ntRecordContents	RecordContents
	(RecordField)* RecordCaseBlock

ntRecordCaseBlock	RecordCaseBlock
	'case'* Identifier* (':'* Identifier*)? 'of'* (RecordCase)*
	@

ntRecordCase	RecordCase	Simplify
	CaseLabels* ':'* '('* RecordCaseContents ')'* (';'*)?

ntCaseLabels	CaseLabels	AsText
	ConstExpression (',' ConstExpression)*

ntRecordCaseContents	RecordCaseContents
	NextRecordCaseContentsEx

ntNextRecordCaseContents	NextRecordCaseContents	Simplify
	';'* NextRecordCaseContentsEx
	RecordCaseBlock

ntNextRecordCaseContentsEx	NextRecordCaseContentsEx	Simplify
	RecordCaseField NextRecordCaseContents
	RecordCaseBlock

ntRecordField	RecordField
	CommaIdentDeclList ':'* TypeDesc TypeModifiers ';'*

ntRecordCaseField	RecordCaseField
	CommaIdentDeclList ':'* TypeDesc TypeModifiers

ntField	Field
	CommaIdentDeclList ':'* TypeDesc TypeModifiers ';'*

ntClassDesc	ClassDesc
	'class'* ClassExDesc

ntClassExDesc	ClassExDesc	Simplify
	ClassHeritage ClassContents
	1 'of' QualifiedIdent

ntClassContents	ClassContents	Simplify
	1 ClassMemberLists 'end'*
	@

ntClassHeritage	ClassHeritage
	'('* QualifiedIdent (','* QualifiedIdent)* ')'*
	@

ntClassMemberLists	ClassMemberLists
	ClassMemberList (Visibility ClassMemberList)*

ntVisibility	Visibility
	'private'
	'protected'
	'public'
	'published'
	'strict' StrictVisibility

ntStrictVisibility	StrictVisibility	Simplify
	'private'
	'protected'

ntClassMemberList	ClassMemberList	Simplify
	(Field)* (ClassMethodProp)*

ntInterfaceDesc	InterfaceDesc
	'interface'* (InterfaceHeritage InterfaceGUID InterfaceMemberList 'end'*)?

ntInterfaceHeritage	InterfaceHeritage
	'('* QualifiedIdent ')'*
	@

ntDispInterfaceDesc	DispInterfaceDesc
	'dispinterface'* (DispInterfaceHeritage InterfaceGUID InterfaceMemberList 'end'*)?

ntDispInterfaceHeritage	DispInterfaceHeritage
	@

ntInterfaceGUID	InterfaceGUID	AsText
	'['* ConstExpression ']'*
	@

ntInterfaceMemberList	InterfaceMemberList
	(IntfMethodProp)*

ntClassMethodProp	ClassMethodProp	Simplify
	ClassMethodDecl
	PropertyDecl

ntClassMethodDecl	ClassMethodDecl	SuccessiveTries
	IntfMethodRedirector
	MethodDecl

ntIntfMethodProp	IntfMethodProp	Simplify
	MethodDecl
	PropertyDecl

ntIntfMethodRedirector	IntfMethodRedirector
	IntfMethodRedirKind* Identifier '.'* Identifier '='* Identifier ';'*

ntIntfMethodRedirKind	IntfMethodRedirKind
	'procedure'
	'function'

ntMethodDecl	MethodDecl
	MethodKind MethodNameDeclaration MethodSignature ';'* (MethodModifier ';'*)*

ntPropertyDecl	PropertyDecl
	PropertyKind* IdentifierDecl PropertyNextDecl (PropInfo)* ';'* (PropertyModifier ';'*)*

ntPropertyKind	PropertyKind	AsText
	'property'

ntPropertyNextDecl	PropertyNextDecl	Simplify
	PropertySignature
	RedefineMarker

ntRedefineMarker	RedefineMarker
	@

ntPropInfo	PropInfo	Simplify
	PropReadAccess
	PropWriteAccess
	PropIndex
	PropDefaultValue
	PropStorage
	IgnoredPropInfo

ntPropReadAccess	PropReadAccess
	'read'* QualifiedIdent

ntPropWriteAccess	PropWriteAccess
	'write'* QualifiedIdent

ntPropIndex	PropIndex
	'index'* ConstExpression

ntPropDefaultValue	PropDefaultValue
	'default'* ConstExpression
	'nodefault'*

ntPropStorage	PropStorage
	'stored'* Expression

ntIgnoredPropInfo	IgnoredPropInfo
	'readonly'
	'writeonly'
	'dispid' ConstExpression

ntPropertyModifier	PropertyModifier	Simplify
	DefaultMarker
	IgnoredPropertyModifier

ntDefaultMarker	DefaultMarker
	'default'

ntIgnoredPropertyModifier	IgnoredPropertyModifier
	'deprecated'

ntEventDesc	EventDesc	AsText
	RoutineKind MethodSignature EventModifiers

ntEventModifiers	EventModifiers	SuccessiveTries
	CallingConvention EventModifiers
	EventIsOfObject EventModifiers
	';'* CallingConvention EventModifiers
	@

ntEventIsOfObject	EventIsOfObject	AsText
	'of' 'object'

ntRoutineDecl	RoutineDecl
	RoutineKind MethodNameDeclaration MethodSignature (RoutineModifier)* ';'* (RoutineModifier ';'*)*

ntRoutineKind	RoutineKind	AsText
	'procedure'
	'function'

ntMethodKind	MethodKind	AsText
	'class' ClassMethodKind
	'procedure'
	'function'
	'constructor'
	'destructor'

ntClassMethodKind	ClassMethodKind	Simplify
	'procedure'
	'function'

ntMethodNameDeclaration	MethodNameDeclaration
	Identifier

ntRoutineModifier	RoutineModifier	Simplify
	CallingConvention
	OverloadMarker
	IgnoredRoutineModifier

ntMethodModifier	MethodModifier	Simplify
	CallingConvention
	OverloadMarker
	MethodLinkKind
	AbstractMarker
	IgnoredMethodModifier

ntCallingConvention	CallingConvention
	'register'
	'cdecl'
	'pascal'
	'stdcall'
	'safecall'
	'assembler'

ntMethodLinkKind	MethodLinkKind
	'virtual'
	'dynamic'
	'message' ConstExpression
	'override'

ntAbstractMarker	AbstractMarker
	'abstract'

ntOverloadMarker	OverloadMarker
	'overload'

ntIgnoredRoutineModifier	IgnoredRoutineModifier
	'deprecated' (tkStringCst)?
	'platform'
	'inline'

ntIgnoredMethodModifier	IgnoredMethodModifier
	'deprecated' (tkStringCst)?
	'platform'
	'inline'
	'reintroduce'
	'dispid' ConstExpression

ntMethodSignature	MethodSignature
	('('* MethodParamList ')'*)? ReturnType

ntPropertySignature	PropertySignature
	('['* ParamList ']'*)? PropType

ntMethodParamList	MethodParamList	Simplify
	ParamList
	@

ntParamList	ParamList	Simplify
	Param (';'* Param)*

ntReturnType	ReturnType
	':'* QualifiedIdent
	@

ntPropType	PropType
	':'* QualifiedIdent

ntParam	Param
	ParamKind ParamNameList ParamTypeAndDefault

ntParamKind	ParamKind
	'const'
	'var'
	'out'
	@

ntParamNameList	ParamNameList
	ParamName (','* ParamName)*

ntParamName	ParamName
	Identifier

ntParamTypeAndDefault	ParamTypeAndDefault	Simplify
	':'* ComplexParamType (ParamDefault)?
	@

ntComplexParamType	ComplexParamType	Simplify
	ParamIsArray ParamArrayType
	ParamType

ntParamIsArray	ParamIsArray	AsText
	'array' 'of'

ntParamArrayType	ParamArrayType	Simplify
	TypeName
	'const'*

ntParamType	ParamType	Simplify
	TypeName

ntParamDefault	ParamDefault	Simplify
	'='* InitializationExpression

ntMethodImpl	MethodImpl
	MethodImplHeader ForwardOrMethodBody

ntMethodImplHeader	MethodImplHeader
	MethodKind QualifiedIdent MethodSignature (RoutineModifier)* ';'* (RoutineModifier ';'*)*

ntForwardOrMethodBody	ForwardOrMethodBody	Simplify
	ForwardMarker
	MethodBody

ntMethodBody	MethodBody
	(InMethodSection)* BeginEndBlock ';'*

ntInMethodSection	InMethodSection	Simplify
	TypeSection
	ConstSection
	LocalVarSection

ntForwardMarker	ForwardMarker
	'forward' ';'*

ntUnitInitialization	UnitInitialization
	'initialization'* InstructionList

ntUnitFinalization	UnitFinalization
	'finalization'* InstructionList

ntLocalVarSection	LocalVarSection
	'var'* (LocalVar)+

ntLocalVar	LocalVar
	CommaIdentDeclList ':'* TypeDesc ';'*

ntInstructionList	InstructionList
	(Instruction ';'*)*

ntInstruction	Instruction	Simplify
	NoInstruction
	BeginEndBlock
	IfThenElseInstruction
	WhileInstruction
	RepeatInstruction
	ForInstruction
	TryInstruction
	RaiseInstruction
	ExpressionInstruction

ntNoInstruction	NoInstruction
	@

ntBeginEndBlock	BeginEndBlock
	'begin'* InstructionList 'end'*

ntIfThenElseInstruction	IfThenElseInstruction
	'if'* Expression 'then'* Instruction ElseBranch

ntElseBranch	ElseBranch	Simplify
	1 'else'* Instruction
	NoInstruction

ntWhileInstruction	WhileInstruction
	'while'* Expression 'do'* Instruction

ntRepeatInstruction	RepeatInstruction
	'repeat'* InstructionList 'until'* Expression

ntForInstruction	ForInstruction
	'for'* ForControlVar ':='* Expression ForToDownTo Expression 'do'* Instruction

ntForControlVar	ForControlVar
	Identifier

ntForToDownTo	ForToDownTo	Simplify
	ForTo
	ForDownTo

ntForTo	ForTo
	'to'

ntForDownTo	ForDownTo
	'downto'

ntTryInstruction	TryInstruction
	'try'* InstructionList NextTryInstruction 'end'*

ntNextTryInstruction	NextTryInstruction	Simplify
	ExceptClause
	FinallyClause

ntExceptClause	ExceptClause
	'except'* NextExceptClause

ntNextExceptClause	NextExceptClause	Simplify
	InstructionList
	MultiOn

ntMultiOn	MultiOn
	(OnClause)+ MultiOnElseClause

ntOnClause	OnClause
	'on'* ExceptionVarAndType 'do'* InstructionList

ntExceptionVarAndType	ExceptionVarAndType
	QualifiedIdent (':'* QualifiedIdent)?

ntMultiOnElseClause	MultiOnElseClause
	'else'* InstructionList
	@

ntFinallyClause	FinallyClause
	'finally'* InstructionList

ntRaiseInstruction	RaiseInstruction
	'raise'* (Expression)?

ntExpressionInstruction	ExpressionInstruction
	ExecutableExpression

ntExecutableExpression	ExecutableExpression
	Expression (AssignmentOp Expression)?

ntAssignmentOp	AssignmentOp
	':='
